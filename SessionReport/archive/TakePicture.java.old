package com.android.bft;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.MediaStore.Images.Media;
import android.util.AttributeSet;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;

public class TakePicture extends Activity implements SurfaceHolder.Callback {

	private Camera camera;
	private SurfaceView surfaceCamera;
	private Boolean isPreview;

	
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
	
     
        	// On met l'application en plein écran et sans barre de titre
        	getWindow().setFormat(PixelFormat.TRANSLUCENT);
        	requestWindowFeature(Window.FEATURE_NO_TITLE);
        	getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        			WindowManager.LayoutParams.FLAG_FULLSCREEN);

        	isPreview = false;

        	// On applique notre layout
        	setContentView(R.layout.surfacecamera);

        	// On récupère notre surface pour le preview
        	surfaceCamera = (SurfaceView) findViewById(R.id.cpPreview);

        	// Méthode d'initialisation de la caméra
        	InitializeCamera();
        
        	
        	// Quand on clique sur notre surface
        	surfaceCamera.setOnClickListener(new OnClickListener() {

        		public void onClick(View v) {
        			// On prend une photo
        			if (camera != null) {
        				SavePicture();
        			}

        		}

        		private void SavePicture() {
        			try {
        				SimpleDateFormat timeStampFormat = new SimpleDateFormat(
        						"yyyy-MM-dd-HH.mm.ss");
        				String fileName = "photo_" + timeStampFormat.format(new Date())
        						+ ".jpg";

        				// Metadata pour la photo
        				ContentValues values = new ContentValues();
        				values.put(Media.TITLE, fileName);
        				values.put(Media.DISPLAY_NAME, fileName);
        				values.put(Media.DESCRIPTION, "Image prise par FormationCamera");
        				values.put(Media.DATE_TAKEN, new Date().getTime());
        				values.put(Media.MIME_TYPE, "image/jpeg");

        				// Support de stockage
        				Uri taken = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI,
        						values);

        				// Ouverture du flux pour la sauvegarde
        				final FileOutputStream stream = (FileOutputStream) getContentResolver().openOutputStream(
        						taken);

        		        ImageCaptureCallback iccb = null;

        				iccb = new ImageCaptureCallback( getContentResolver().openOutputStream(taken));
        			
        			    Camera.PictureCallback mPictureCallbackRaw = new Camera.PictureCallback() {
        		            public void onPictureTaken(byte[] data, Camera c) {
        		                Log.e(getClass().getSimpleName(), "PICTURE CALLBACK RAW: " + data);
        		                    System.out.println("\n\n\n\nThe Data in mPictureCallbackRaw is :"+data);
        		                //camera.startPreview(); // Added StastPreview();
        		            }
        		            };
        		        
        				Camera.ShutterCallback mShutterCallback = new Camera.ShutterCallback() {
        		      public void onShutter() {
        		          Log.e(getClass().getSimpleName(), "SHUTTER CALLBACK");
        		      }
        		  };
        				
        				// Callback pour la prise de photo
/*        				Camera.PictureCallback pictureCallback = new Camera.PictureCallback() {

        					public void onPictureTaken(byte[] data, Camera camera) {
        						if (data != null) {
        							// Enregistrement de votre image
        							try {
        								if (stream != null) {
        									stream.write(data);
        									stream.flush();
        									stream.close();
        								}
        							} catch (Exception e) {
        								// TODO: handle exception
        							}

        							// On redémarre la prévisualisation
        							camera.startPreview();
        						}
        					}
        				};*/
        				
        				camera.takePicture(mShutterCallback, mPictureCallbackRaw, iccb);

        				
        			} catch (Exception e) {
        				e.printStackTrace();
        			}

        		}
        	});
        
//        SurfaceView cameraSurface = (SurfaceView)findViewById(R.id.cpPreview);
//        SurfaceHolder holder = cameraSurface.getHolder();
//        //holder.addCallback(this);
//        holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
//	
//        String fileName = UUID.randomUUID().toString()+".jpg";
//		//String fileName = System.currentTimeMillis() + ".jpg";
//		ContentValues values = new ContentValues();
//		//values.put(MediaStore.Images.Media.TITLE, fileName);
//		values.put(MediaStore.Images.Media.TITLE, "Test.jpg");
//		values.put(MediaStore.Images.Media.DESCRIPTION, "Image capture by camera");
//		values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg");
//		
//	    //Uri fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE); // create a file to save the image
//	    
//	    File file =Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
//		//File[] filelist = file.listFiles();
//								
//		
//	    Uri imageUri = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI, values);
//
//        
//        ImageCaptureCallback iccb = null;
//        try {
//			iccb = new ImageCaptureCallback( getContentResolver().openOutputStream(imageUri));
//		} catch (FileNotFoundException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//        Camera camera = Camera.open();
//        
//        Camera.Parameters parameters = camera.getParameters();
//        
//     
//     
//        try {
//			camera.setPreviewDisplay(holder);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//       
//        
//        camera.startPreview();
//       
//        
//        Camera.PictureCallback mPictureCallbackRaw = new Camera.PictureCallback() {
//            public void onPictureTaken(byte[] data, Camera c) {
//                Log.e(getClass().getSimpleName(), "PICTURE CALLBACK RAW: " + data);
//                    System.out.println("\n\n\n\nThe Data in mPictureCallbackRaw is :"+data);
//                //camera.startPreview(); // Added StastPreview();
//            }
        
//		Camera.ShutterCallback mShutterCallback = new Camera.ShutterCallback() {
//      public void onShutter() {
//          Log.e(getClass().getSimpleName(), "SHUTTER CALLBACK");
//      }
//  };
//  
//  camera.takePicture(mShutterCallback, mPictureCallbackRaw, iccb);
//	
//  //startActivityForResult(Intent.createChooser(intent, "Capture Image"), CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
//  camera.stopPreview();
//  
//  camera.release();
//  
//	}
    };

        private void InitializeCamera() {

        	 	// On attache nos retour du holder à notre activite
        	    surfaceCamera.getHolder().addCallback(this);
             	// On spécifie le type du holder en mode SURFACE_TYPE_PUSH_BUFFERS
               	surfaceCamera.getHolder().setType(
              	            SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);

	}


	@Override
	// Quand la surface change
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {

		// Si le mode preview est lancé alors on le stop
		if (isPreview) {
			camera.stopPreview();
		}
		// On récupère les parametres de la camera
		Camera.Parameters parameters = camera.getParameters();

		// On change la taille
		parameters.setPreviewSize(width, height);

		// On applique nos nouveaux parametres
		camera.setParameters(parameters);

		try {
			// On attache notre previsualisation de la camera au holder de la
			// surface
			camera.setPreviewDisplay(surfaceCamera.getHolder());
		} catch (IOException e) {
		}

		// On lance la previeuw
		camera.startPreview();

		isPreview = true;
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		// On prend le controle de la camera
		if (camera == null)
			camera = Camera.open();
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
	    // On arrête la camera et on rend la main
	    if (camera != null) {
	        camera.stopPreview();
	        isPreview = false;
	        camera.release();
	    }
		
	}

	// Retour sur l'application
	@Override
	public void onResume() {
		super.onResume();
		camera = Camera.open();
	}

	// Mise en pause de l'application
	@Override
	public void onPause() {
		super.onPause();
			if (camera != null) {
			camera.release();
			camera = null;
		}
	}
}
